// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.clinic.model;

import ar.com.norrmann.clinic.model.Consultorio;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Consultorio_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Consultorio.entityManager;
    
    public static final List<String> Consultorio.fieldNames4OrderClauseFilter = java.util.Arrays.asList("nombre", "domicilio", "telefonos");
    
    public static final EntityManager Consultorio.entityManager() {
        EntityManager em = new Consultorio().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Consultorio.countConsultorios() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Consultorio o", Long.class).getSingleResult();
    }
    
    public static List<Consultorio> Consultorio.findAllConsultorios() {
        return entityManager().createQuery("SELECT o FROM Consultorio o", Consultorio.class).getResultList();
    }
    
    public static List<Consultorio> Consultorio.findAllConsultorios(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Consultorio o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Consultorio.class).getResultList();
    }
    
    public static Consultorio Consultorio.findConsultorio(Long id) {
        if (id == null) return null;
        return entityManager().find(Consultorio.class, id);
    }
    
    public static List<Consultorio> Consultorio.findConsultorioEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Consultorio o", Consultorio.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Consultorio> Consultorio.findConsultorioEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Consultorio o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Consultorio.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Consultorio.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Consultorio.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Consultorio attached = Consultorio.findConsultorio(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Consultorio.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Consultorio.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Consultorio Consultorio.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Consultorio merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
