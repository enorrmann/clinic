// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.clinic.model;

import ar.com.norrmann.clinic.model.Consultorio;
import ar.com.norrmann.clinic.model.Dia;
import ar.com.norrmann.clinic.model.HorarioDisponible;
import ar.com.norrmann.clinic.model.Profesional;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect HorarioDisponible_Roo_Finder {
    
    public static Long HorarioDisponible.countFindHorarioDisponiblesByConsultorioAndProfesional(Consultorio consultorio, Profesional profesional) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional", Long.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        return ((Long) q.getSingleResult());
    }
    
    public static Long HorarioDisponible.countFindHorarioDisponiblesByConsultorioAndProfesionalAndDia(Consultorio consultorio, Profesional profesional, Dia dia) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        if (dia == null) throw new IllegalArgumentException("The dia argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional AND o.dia = :dia", Long.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        q.setParameter("dia", dia);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<HorarioDisponible> HorarioDisponible.findHorarioDisponiblesByConsultorioAndProfesional(Consultorio consultorio, Profesional profesional) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        TypedQuery<HorarioDisponible> q = em.createQuery("SELECT o FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional", HorarioDisponible.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        return q;
    }
    
    public static TypedQuery<HorarioDisponible> HorarioDisponible.findHorarioDisponiblesByConsultorioAndProfesional(Consultorio consultorio, Profesional profesional, String sortFieldName, String sortOrder) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        String jpaQuery = "SELECT o FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<HorarioDisponible> q = em.createQuery(jpaQuery, HorarioDisponible.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        return q;
    }
    
    public static TypedQuery<HorarioDisponible> HorarioDisponible.findHorarioDisponiblesByConsultorioAndProfesionalAndDia(Consultorio consultorio, Profesional profesional, Dia dia) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        if (dia == null) throw new IllegalArgumentException("The dia argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        TypedQuery<HorarioDisponible> q = em.createQuery("SELECT o FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional AND o.dia = :dia", HorarioDisponible.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        q.setParameter("dia", dia);
        return q;
    }
    
    public static TypedQuery<HorarioDisponible> HorarioDisponible.findHorarioDisponiblesByConsultorioAndProfesionalAndDia(Consultorio consultorio, Profesional profesional, Dia dia, String sortFieldName, String sortOrder) {
        if (consultorio == null) throw new IllegalArgumentException("The consultorio argument is required");
        if (profesional == null) throw new IllegalArgumentException("The profesional argument is required");
        if (dia == null) throw new IllegalArgumentException("The dia argument is required");
        EntityManager em = HorarioDisponible.entityManager();
        String jpaQuery = "SELECT o FROM HorarioDisponible AS o WHERE o.consultorio = :consultorio AND o.profesional = :profesional AND o.dia = :dia";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<HorarioDisponible> q = em.createQuery(jpaQuery, HorarioDisponible.class);
        q.setParameter("consultorio", consultorio);
        q.setParameter("profesional", profesional);
        q.setParameter("dia", dia);
        return q;
    }
    
}
