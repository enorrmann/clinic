// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.norrmann.clinic.model;

import ar.com.norrmann.clinic.model.Paciente;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Paciente_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Paciente.entityManager;
    
    public static final List<String> Paciente.fieldNames4OrderClauseFilter = java.util.Arrays.asList("apellido", "nombres", "documento", "telefonos", "domicilio", "sexo", "email", "observaciones");
    
    public static final EntityManager Paciente.entityManager() {
        EntityManager em = new Paciente().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Paciente.countPacientes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Paciente o", Long.class).getSingleResult();
    }
    
    public static List<Paciente> Paciente.findAllPacientes() {
        return entityManager().createQuery("SELECT o FROM Paciente o", Paciente.class).getResultList();
    }
    
    public static List<Paciente> Paciente.findAllPacientes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Paciente o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Paciente.class).getResultList();
    }
    
    public static Paciente Paciente.findPaciente(Long id) {
        if (id == null) return null;
        return entityManager().find(Paciente.class, id);
    }
    
    public static List<Paciente> Paciente.findPacienteEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Paciente o", Paciente.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Paciente> Paciente.findPacienteEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Paciente o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Paciente.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Paciente.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Paciente.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Paciente attached = Paciente.findPaciente(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Paciente.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Paciente.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Paciente Paciente.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Paciente merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
